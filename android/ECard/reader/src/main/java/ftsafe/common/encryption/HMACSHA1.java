package ftsafe.common.encryption;

import javax.crypto.Mac;
import javax.crypto.SecretKey;
import javax.crypto.spec.SecretKeySpec;

import ftsafe.common.BaseFunction;


public class HMACSHA1 {   
    private static final String MAC_NAME = "HmacSHA1";    
    private static final String ENCODING = "UTF-8";
    static BaseFunction ftPublic = new BaseFunction();
      
    /* 
     * 展示了一个生成指定算法密钥的过程 初始化HMAC密钥  
     * @return  
     * @throws Exception 
     *  
      public static String initMacKey() throws Exception { 
      //得到一个 指定算法密钥的密钥生成器 
      KeyGenerator KeyGenerator keyGenerator =KeyGenerator.getInstance(MAC_NAME);  
      //生成一个密钥 
      SecretKey secretKey =keyGenerator.generateKey(); 
      return null; 
      } 
     */  
      
    /**  
     * 使用 HMAC-SHA1 签名方法对对encryptText进行签名  
     * @param encryptText 被签名的字符串 (ACSII数据串) 
     * @param encryptKey  密钥 (ACSII数据串)  
     * @return  
     * @throws Exception  
     */    
    public static byte[] HmacSHA1Encrypt(String encryptText, String encryptKey) throws Exception     
    {           
        byte[] data=ftPublic.ftStringToByte(encryptKey);  
        //根据给定的字节数组构造一个密钥,第二参数指定一个密钥算法的名称  
        SecretKey secretKey = new SecretKeySpec(data, MAC_NAME);   
        //生成一个指定 Mac 算法 的 Mac 对象  
        Mac mac = Mac.getInstance(MAC_NAME);   
        //用给定密钥初始化 Mac 对象  
        mac.init(secretKey);    
          
        byte[] text = ftPublic.ftStringToByte(encryptText);    
        //完成 Mac 操作   
        return mac.doFinal(text);    
    }    
    
    public static void main(String[] args) throws Exception {  
        String pbServerCert
        String pbTermCert
        String R1 = "084C8B46211A7D9BDDFAEC6964C88D9CCAE29E8CCE958519A5D6B4FAFA33CF5232"; 
        String R2 = "11E0627CD0E51D81C3EA09852786A58548A7EE6C55E3D6345980B664C580ABA7EB"; 
        String pbSignature="61D1B85EF4093D1109AF5921EB17601D37050A1B01ADE7D5A30938DBE9EE3481338C19CAA2456249B81FCE6AC53CDBE1B0960D808F016ADFD865EF492FC53D29DC4B3202ADE1427CB4BFE534E84CA2A979232B92BA76E8D7DD3860B9BDC8CE94FB91599180F404FD8C2E11DB5FB01F2094832C94201AFC2D74A7AACA8D55FE668BBE2E97D681D16D8071E7E09B34F2C0C688D99C715C461B9D69AC006084817CBABA54604E345B0482B43C56EFA39E3F4D8F1923CE5610EB101159208E296C9A1E1893C7785FFBE68BF0DF19265DF9C52B94CD2478EE8185C3ECF6ADEB01BBDF5AD89DC28A557FA73D10292EBC684C9DCDDC05A58589E61C86774E4A1CD6CB80";
        String pbEncMasterKey = "1D3A79FD86C94DA77938592127AA621F381D4C0D3911B609ED9DDD44F18DE5D67E882B0E6253937C272BEC25341B4BB7366E79D9A3106ECE47DAFE1B13CAE06AC962052E8FD5E96BA187A08BB5D896A9492664E889B5065EEE7A497D9A24CA85FB1D135809E276537507C9E16DBE022041E8A98DAE700B6277D81CB8BBCAF1379BB0C4D1B8E125775D44B4F5272C61AD993313373D65324BB804BDC1A87F2C475150C8D5E3BD565BF8B74FDD7EB4B5343731B7D2BDE04C6A7B8E482F54251C19B40E52E0269714D43BEA59A700E89E6D96D5291A9EEF06CAE67FFEB5F285A3B5C53A2024124703A27908BCF5A21A049E8A5B1B7CD634363AE00EBA0D3B199026";
        String key = "555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555";
        
        String shaServerCert = new SHA1().doSHA1(ftPublic.ftStringToByte(pbServerCert));
        String shaTermCert = new SHA1().doSHA1(ftPublic.ftStringToByte(pbTermCert));
        
        String H4 = R2+R1+shaServerCert+shaTermCert+pbSignature+pbEncMasterKey;
        H4=ftPublic.ftBCDToASCII("SERVER")+ new SHA1().doSHA1(ftPublic.ftStringToByte(H4));
        
        //String buf = DoData.byteToString(getHmacSHA1(H4,key));
        String buf1 = ftPublic.ftByteToString(HmacSHA1Encrypt(H4,key));
        
        //String buf = DoData.byteToString(getHmacSHA1("A704F082B28CA20BB0CEBE7161253369E324AB93ABE5DAA8672011B70A8D905F966888198145DEB59B5141809D043CE7","A704F082B28CA20BB0CEBE7161253369E324AB93ABE5DAA8672011B70A8D905F966888198145DEB59B5141809D043CE7"));
        //String buf1 = DoData.byteToString(HmacSHA1Encrypt("A704F082B28CA20BB0CEBE7161253369E324AB93ABE5DAA8672011B70A8D905F966888198145DEB59B5141809D043CE7","A704F082B28CA20BB0CEBE7161253369E324AB93ABE5DAA8672011B70A8D905F966888198145DEB59B5141809D043CE7"));
        
        //System.out.println(buf);  
        System.out.println(buf1); 
    }

}
